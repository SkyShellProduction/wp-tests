"use strict"; function _toConsumableArray(a) { return _arrayWithoutHoles(a) || _iterableToArray(a) || _unsupportedIterableToArray(a) || _nonIterableSpread() } function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") } function _unsupportedIterableToArray(a, b) { if (a) { if ("string" == typeof a) return _arrayLikeToArray(a, b); var c = Object.prototype.toString.call(a).slice(8, -1); return "Object" === c && a.constructor && (c = a.constructor.name), "Map" === c || "Set" === c ? Array.from(a) : "Arguments" === c || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c) ? _arrayLikeToArray(a, b) : void 0 } } function _iterableToArray(a) { if ("undefined" != typeof Symbol && null != a[Symbol.iterator] || null != a["@@iterator"]) return Array.from(a) } function _arrayWithoutHoles(a) { if (Array.isArray(a)) return _arrayLikeToArray(a) } function _arrayLikeToArray(a, b) { (null == b || b > a.length) && (b = a.length); for (var c = 0, d = Array(b); c < b; c++)d[c] = a[c]; return d } var form = document.querySelector(".tests"), resetBtn = document.querySelector(".reset"), answer = _toConsumableArray(document.querySelectorAll(".answer")), info = document.querySelector(".info"), toggler = document.querySelector(".toggler"), bg = document.querySelector(".bg"), root = document.querySelector(":root"); toggler.addEventListener("click", function () { theme() }),"on" == localStorage.darkMode && theme(); function theme() { toggler.classList.contains("active") ? (toggler.classList.remove("active"), localStorage.setItem("darkMode", "off"), document.documentElement.style.setProperty("--black", "#000"), document.documentElement.style.setProperty("--white", "#fff")) : (toggler.classList.add("active"), localStorage.setItem("darkMode", "on"), document.documentElement.style.setProperty("--black", "#fff"), document.documentElement.style.setProperty("--white", "#000")) } resetBtn.addEventListener("click", function (a) { a.preventDefault(); var b = confirm("\u0412\u044B \u0443\u0432\u0435\u0440\u0435\u043D\u044B \u0432 \u044D\u0442\u043E\u043C, \u0442\u0435\u043A\u0443\u0449\u0438\u0439 \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441 \u0441\u0431\u0440\u043E\u0441\u0438\u0442\u044C\u0441\u044F?"); b && (form.reset(), document.body.scrollIntoView({ block: "start", behavior: "smooth" }), info.innerHTML = "", answer.forEach(function (a) { a.classList.remove("error"), a.classList.remove("good") })) }), form.addEventListener("submit", function (a) { a.preventDefault(), document.body.scrollIntoView({ block: "start", behavior: "smooth" }), fetch("./tests.json").then(function (a) { return a.json() }).then(function (a) { var b = 0, c = 0, d = _toConsumableArray(document.querySelectorAll(".answer:checked")); a.forEach(function (a, e) { var f = d[e].nextElementSibling.textContent.toLowerCase(), g = a.answer.toLowerCase(); f == g ? (b++, d[e].classList.add("good")) : (c++, d[e].classList.add("error")) }), info.innerHTML = "\n            <p>\u041A\u043E\u043B-\u0432\u043E \u0432\u0435\u0440\u043D\u044B\u0445 \u043E\u0442\u0432\u0435\u0442\u043E\u0432: ".concat(b, ";</p> \n            <p>\u041A\u043E\u043B-\u0432\u043E \u043D\u0435\u0432\u0435\u0440\u043D\u044B\u0445 \u043E\u0442\u0432\u0435\u0442\u043E\u0432: ").concat(c, ";</p> \n            <p>\u041E\u0431\u0449\u0438\u0439 \u0431\u0430\u043B\u043B ").concat(b, "/50;</p> \n            <p>\u0412\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u043E\u0437\u043D\u0430\u043A\u043E\u043C\u0438\u0442\u044C\u0441\u044F \u0441 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u043C\u0438 \u043D\u0438\u0436\u0435</p>\n        ") }) });
